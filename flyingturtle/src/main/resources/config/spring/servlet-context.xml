<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p" 
       xmlns:tx="http://www.springframework.org/schema/tx" 
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context 
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/mvc
                           http://www.springframework.org/schema/mvc/spring-mvc.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd">
                           
	<!-- 클래스를 빈으로 빈등록 +자동주입 같이 해줌 -->
	<context:component-scan base-package="kr.co.flyingturtle" />
	<!-- 마이바티스 정보 처리 부분 -->
	<context:property-placeholder location="classpath:config/mybatis/db.properties"/>
	<!-- 데이터 베이스의 연결을 커넥션 풀 관리: apach에서 제공되는 dbcp2 라이브러리를 활용 -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" 
	p:driverClassName="${JDBC.driver}"
	p:url="${JDBC.ConnectionURL}"
	p:username="${JDBC.username}"
	p:password="${JDBC.password}"/>
	
	<!-- 스프링과 mybatis 연결 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="typeAliasesPackage" value="kr.co.flyingturtle.repository.vo"></property>
		<property name="mapperLocations" value="classpath:config/sqlmap/*.xml"></property>
		<property name="configLocation" value="classpath:config/mybatis/sqlMapConfig.xml"></property>
	</bean>
	
	<!-- Mapper 인터페이스 정보를 스프링이 관리 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="kr.co.flyingturtle.repository.mapper"></property>
	</bean>
	
	
	<!-- 1 트랜젝션 관리하기 db연결정보 가지고 있는걸 관리하는 것-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" rollback-for="Exception" />
			<tx:method name="delete*" rollback-for="Exception" />
			<tx:method name="update*" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>

	<!-- 트렌젝션을 위한 AOP 설정 
	<aop:config>
		<aop:pointcut expression="execution(public * kr.co.mlec..service.*Impl.*(..))" id="pCut"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pCut"/>
	</aop:config>
	-->
	<!-- 2 트렌젝션 처리를 어노테이션 방식으로  xml설정을 확 줄여줌
	<tx:annotation-driven  transaction-manager="transactionManager"/>
	-->
	
	
	<!-- tiles view resolver 빈추가 -->
	 <bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
        <property name="order" value="1" /><!-- 순서를 우선으로 지정 -->
    </bean>
     
    <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
        <property name="definitions">
            <list>
                <value>/WEB-INF/tiles/tiles-def.xml</value>
            </list>
        </property>
    </bean>
    <!-- jsp파일 우선순위를 2번째로 변경 -->
   <bean class="org.springframework.web.servlet.view.UrlBasedViewResolver" p:order="2"
       p:viewClass="org.springframework.web.servlet.view.JstlView"
       p:prefix="/WEB-INF/view/" p:suffix=".jsp"/>

	
	
</beans>
















